scale_x_continuous(expand = c(0,0))+xlab('dataset number')+ylab('Tissue Sources')+
theme(text = element_text(size=20))
ggsave('F:\\scLT-seq db\\fig\\fig1/fig2d.pdf',width = 9,height = 6)
### fig2C
ggnestedpie(data =summary_table, group_key = c("Species","Barcode.type"), count_type = "full",
inner_label_info = "count", inner_label_split = NULL,
inner_label_threshold = 2, inner_label_size = 3.8,
outer_label_type = "horizon", outer_label_pos = "in",
outer_label_info = "count", outer_label_threshold = 1,
inner_fill_color=barcode_type_col,border_color = 'NA',outer_label_size = 5,
outer_fill_color = spec_color,
r1=3,r2=6,r0=2)
### fig2C
ggnestedpie(data =summary_table, group_key = c("Species","Barcode.type"), count_type = "full",
inner_label_info = "count", inner_label_split = NULL,
inner_label_threshold = 2, inner_label_size = 3.8,
outer_label_type = "horizon", outer_label_pos = "in",
outer_label_info = "count", outer_label_threshold = 1,
inner_fill_color=barcode_type_col,border_color = 'NA',outer_label_size = 5,
outer_fill_color = spec_color,
r1=4.5,r2=6,r0=2)
### fig2C
ggnestedpie(data =summary_table, group_key = c("Species","Barcode.type"), count_type = "full",
inner_label_info = "count", inner_label_split = NULL,
inner_label_threshold = 2, inner_label_size = 5,
outer_label_type = "horizon", outer_label_pos = "in",
outer_label_info = "count", outer_label_threshold = 1,
inner_fill_color=barcode_type_col,border_color = 'NA',outer_label_size = 5,
outer_fill_color = spec_color,
r1=3,r2=4.5,r0=2)
### fig2C
ggnestedpie(data =summary_table, group_key = c("Species","Barcode.type"), count_type = "full",
inner_label_info = "count", inner_label_split = NULL,
inner_label_threshold = 2, inner_label_size = 5,
outer_label_type = "horizon", outer_label_pos = "in",
outer_label_info = "count", outer_label_threshold = 1,
inner_fill_color=barcode_type_col,border_color = 'NA',outer_label_size = 8,
outer_fill_color = spec_color,
r1=3,r2=4.5,r0=2)
ggsave('F:\\scLT-seq db\\fig\\fig1/fig2c.pdf',width = 8,height = 6)
library(Seurat)
rna = readRDS('E:\\public\\public_data\\TOME\\seurat_object_E5.5.rds')
table(rna$cell_state)
table(rna$cell_type)
View(rna)
rna=SCTransform(rna)
rna = RunPCA(rna)
rna = RunUMAP(rna)
ElbowPlot(rna)
rna = RunUMAP(rna,dims = 1:10)
UMAPPlot(rna,group.by='cell_type')
rna = RunUMAP(rna,dims = 1:6)
UMAPPlot(rna,group.by='cell_type')
rna = RunUMAP(rna,dims = 1:5)
UMAPPlot(rna,group.by='cell_type')
rna = RunUMAP(rna,dims = 1:6)
UMAPPlot(rna,group.by='cell_type')
View(rna)
table(rna@meta.data[["sample"]])
table(rna@meta.data[["orig.ident"]])
UMAPPlot(rna,group.by='orig.ident')
rna = readRDS('E:\\public\\public_data\\TOME\\seurat_object_E5.5.rds')
rna = subset(rna,orig.ident=='E5.5')
table(rna$cell_type)
table(rna$cell_type)
rna=SCTransform(rna)
rna = RunPCA(rna)
ElbowPlot(rna)
rna = RunUMAP(rna,dims = 1:5)
UMAPPlot(rna,group.by='cell_type')
rna = FindNeighbors(rna,dims = 1:5)
rna = findClass(rna)
rna = FindClusters(rna)
UMAPPlot(rna)
UMAPPlot(rna,pt.size=1)
UMAPPlot(rna,pt.size=2)
rna = FindAllMarkers(rna)
marker = FindAllMarkers(rna)
marker = marker[marker$avg_log2FC>0.5,]
View(marker)
marker = marker[marker$p_val_adj<0.05,]
View(marker)
library(IReNA)
rna = readRDS('E:\\public\\public_data\\TOME\\seurat_object_E5.5.rds')
rna_mt = rna@assays$RNA@counts
Converse_GeneIDSymbol(rownames(rna_mt),Spec1 = 'Mm')
gene_conv = Converse_GeneIDSymbol(rownames(rna_mt),Spec1 = 'Mm')
View(gene_conv)
rna_mt = rna_mt[gene_conv[,1],]
rna_mt = rna@assays$RNA@counts
rna_mt = rna_mt[intersect(gene_conv[,1],rownames(rna_mt)),]
View(rna_mt)
rownames(gene_conv) = gene_conv[,1]
rownames(rna_mt) = gene_conv[rownames(rna_mt),2]
rna = CreateSeuratObject(rna_mt)
table(rna$cell_type)
rna=SCTransform(rna)
rna = RunPCA(rna)
ElbowPlot(rna)
rna = RunUMAP(rna,dims = 1:6)
rna = FindNeighbors(rna,dims = 1:6)
rna = FindClusters(rna)
UMAPPlot(rna,pt.size=2)
rna = CreateSeuratObject(rna_mt)
rna = subset(rna,orig.ident=='E5.5')
table(rna$cell_type)
rna=SCTransform(rna)
rna = RunPCA(rna)
ElbowPlot(rna)
rna = RunUMAP(rna,dims = 1:6)
rna = FindNeighbors(rna,dims = 1:6)
rna = FindClusters(rna)
UMAPPlot(rna,pt.size=2)
marker = FindAllMarkers(rna)
marker = marker[marker$avg_log2FC>0.5,]
marker = marker[marker$p_val_adj<0.05,]
View(marker)
DoHeatmap(rna,marker$gene)
rna@assays$SCT@var.features
### call tf
mm_tf = Tranfac201803_Mm_MotifTFsF
expressed_tf = extract_expressed_TFs(rna,unique(mm_tf$TFs),cells_quantile = 0.05)
View(expressed_tf)
expressed_tf = extract_expressed_TFs(rna,unique(mm_tf$TFs),cells_quantile = 0.1)
View(expressed_tf)
VlnPlot(rna,rownames(expressed_tf))
intersect(expressed_tf,rna@assays$SCT@var.features)
rna@assays$SCT@var.features
intersect(rownames(expressed_tf),rna@assays$SCT@var.features)
intersect(unique(mm_tf$TFs),rna@assays$SCT@var.features)
intersect(rownames(expressed_tf),rna@assays$SCT@var.features)
target_tf = intersect(rownames(expressed_tf),rna@assays$SCT@var.features)
### scenic
run_scenic <- function(exprMat,org1='mgi',
dbDir1="E:\\public\\cistarget\\mouse cistarget ranking"){
library(SCENIC)
scenicOptions <- initializeScenic(org=org1, dbDir=dbDir1, nCores=10)
genesKept <- geneFiltering(exprMat, scenicOptions)
exprMat_filtered <- exprMat[genesKept, ]
runCorrelation(exprMat_filtered, scenicOptions)
exprMat_filtered_log <- log2(exprMat_filtered+1)
runGenie3(exprMat_filtered_log, scenicOptions)
WexprMat_log <- log2(exprMat+1)
scenicOptions@settings$dbs <- scenicOptions@settings$dbs["10kb"] # Toy run settings
scenicOptions <- runSCENIC_1_coexNetwork2modules(scenicOptions)
scenicOptions <- runSCENIC_2_createRegulons(scenicOptions, coexMethod=c("top5perTarget")) # Toy run settings
scenicOptions <- runSCENIC_3_scoreCells(scenicOptions, exprMat_log)
}
setwd('E:\\polyATAC\\public epiblast')
run_scenic(rna@assays$RNA@counts)
run_scenic(as.matrix(rna@assays$RNA@counts))
`2.3_motifEnrichment` <- readRDS("E:/polyATAC/public epiblast/int/2.3_motifEnrichment.Rds")
View(`2.3_motifEnrichment`)
`2.2_motifs_AUC` <- readRDS("E:/polyATAC/public epiblast/int/2.2_motifs_AUC.Rds")
View(`2.2_motifs_AUC`)
org1='mgi'
dbDir1="E:\\public\\cistarget\\mouse cistarget ranking"
scenicOptions <- initializeScenic(org=org1, dbDir=dbDir1, nCores=10)
scenicOptions@settings$dbs <- scenicOptions@settings$dbs["10kb"] # Toy run settings
scenicOptions <- runSCENIC_3_scoreCells(scenicOptions, exprMat_log)
exprMat=as.matrix(rna@assays$RNA@counts)
genesKept <- geneFiltering(exprMat, scenicOptions)
exprMat_filtered <- exprMat[genesKept, ]
runCorrelation(exprMat_filtered, scenicOptions)
exprMat_filtered_log <- log2(exprMat_filtered+1)
exprMat_log <- log2(exprMat+1)
scenicOptions <- runSCENIC_3_scoreCells(scenicOptions, exprMat_log)
scenicOptions <- runSCENIC_2_createRegulons(scenicOptions, coexMethod=c("top5perTarget")) # Toy run settings
scenicOptions <- initializeScenic(org=org1, dbDir=dbDir1, nCores=1)
scenicOptions@settings$dbs <- scenicOptions@settings$dbs["10kb"] # Toy run settings
scenicOptions <- runSCENIC_2_createRegulons(scenicOptions, coexMethod=c("top5perTarget")) # Toy run settings
scenicOptions <- runSCENIC_3_scoreCells(scenicOptions, exprMat_log)
library(doParallel)
library(foreach)
scenicOptions <- runSCENIC_3_scoreCells(scenicOptions, exprMat_log)
Step2_regulonTargetsInfo <- read.delim("E:/polyATAC/public epiblast/output/Step2_regulonTargetsInfo.tsv")
View(Step2_regulonTargetsInfo)
`3.4_regulonAUC` <- readRDS("E:/polyATAC/public epiblast/int/3.4_regulonAUC.Rds")
View(`3.4_regulonAUC`)
`3.4_regulonAUC`@assays@data@listData[["AUC"]]
`3.4_regulonAUC`
as.matrix(`3.4_regulonAUC`@assays@data@listData[["AUC"]])
a1=as.matrix(`3.4_regulonAUC`@assays@data@listData[["AUC"]])
View(a1)
pheatmap(a1)
pheatmap(a1,show_colnames = F)
pheatmap(a1,show_colnames = F,cluster_rows = F)
pheatmap(a1,show_colnames = F,cluster_cols = F)
regulonAUC <- loadInt(scenicOptions, "aucell_regulonAUC")
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation=cellInfo[colnames(regulonAUC), "CellType"])
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation='epiblast', "CellType"])
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation=rep('epiblast',195), "CellType"])
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation=rep('epiblast',195))
View(rss)
rssPlot <- plotRSS(rss)
plotRSS_oneSet(rss, setName = "interneurons")
rss
View(regulonAUC)
regulonAUC_mt=as.matrix(`3.4_regulonAUC`@assays@data@listData[["AUC"]])
pheatmap(regulonAUC_mt)
pheatmap(regulonAUC_mt,show_colnames = F)
pheatmap(regulonAUC_mt,show_colnames = F,cluster_cols = F,cluster_rows = F)
View(rss)
View(rss)
order(rssPlot)
order(rssPlot[,1])
order(rss[,1])
order(rss[,1],decreasing = T)
pheatmap(regulonAUC_mt[order(rss[,1],decreasing = T),],show_colnames = F,cluster_cols = F,cluster_rows = F)
pheatmap(regulonAUC_mt[order(rss[,1],decreasing = T),],show_colnames = F,cluster_cols = F,cluster_rows = F,fontsize = 10)
pheatmap(regulonAUC_mt[order(rss[,1],decreasing = T),],show_colnames = F,cluster_cols = F,cluster_rows = F,fontsize = 8)
pheatmap(regulonAUC_mt[order(rss[,1][1:50,],decreasing = T),],show_colnames = F,cluster_cols = F,cluster_rows = F)
pheatmap(regulonAUC_mt[order(rss[,1],decreasing = T),][1:50,],show_colnames = F,cluster_cols = F,cluster_rows = F)
saveRDS(rna,'E:\\polyATAC\\public epiblast/epiblast_e55_obj.rds')
rna[['regulon']] = regulonAUC_mt
colnames(rna)
colnames(regulonAUC_mt)
rna[['regulon']] = `3.4_regulonAUC`@assays@data@listData[["AUC"]]
rna@assays[['regulon']] = `3.4_regulonAUC`@assays@data@listData[["AUC"]]
View(rna)
rna@assays[['regulon']] = regulonAUC
View(rna)
rna@active.assay
marker_regulon = FindAllMarkers(rna)
marker_regulon = marker_regulon[marker_regulon$avg_log2FC>0.5,]
marker_regulon = marker_regulon[marker_regulon$p_val_adj<0.05,]
View(marker_regulon)
View(marker)
DefaultAssay(rna) = 'regulon'
marker_regulon = FindAllMarkers(rna)
View(rna)
regulonAUC
View(regulonAUC)
View(regulonAUC_mt)
rna@assays[['regulon']] = regulonAUC_mt
DefaultAssay(rna) = 'regulon'
marker_regulon = FindAllMarkers(rna)
View(rna)
rna@assays[['regulon']] =  CreateAssayObject(regulonAUC_mt)
DefaultAssay(rna) = 'regulon'
marker_regulon = FindAllMarkers(rna)
saveRDS(rna,'E:\\polyATAC\\public epiblast/epiblast_e55_obj.rds')
heatmap_col = c(rgb(72/255,85/255,167/255),
rgb(255/255,255/255,255/255),
rgb(239/255,58/255,37/255))
pheatmap(regulonAUC_mt[order(rss[,1],decreasing = T),][1:50,],show_colnames = F,
cluster_cols = F,cluster_rows = F,color = colorRampPalette(heatmap_col)(100))
View(marker)
UMAPPlot(rna,pt.size=2)
ggsave('E:\\polyATAC\\public epiblast/epiblast_subcluster_embedding.pdf',
width = 6,height = 5)
rowMeans(rna@assays$SCT@data[rownames(rss)],)
rowMeans(rna@assays$SCT@data[rownames(rss),])
rna@assays$SCT@data[rownames(rss),]
rownames(rss)
expressed_tf
Step2_regulonTargetsInfo <- read.delim("E:/polyATAC/public epiblast/output/Step2_regulonTargetsInfo.tsv")
View(Step2_regulonTargetsInfo)
Step2_regulonTargetsInfo <- read.delim("E:/polyATAC/public epiblast/output/Step2_regulonTargetsInfo.tsv")
View(Step2_regulonTargetsInfo)
rss$TF = rownames(rss)
View(rss)
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation=rep('epiblast',195))
View(rss)
rss = as.data.frame(rss)
rss$TF = rownames(rss)
View(rss)
rss = [order(rss[,1],decreasing = T),]
rss = rss[order(rss[,1],decreasing = T),]
View(rss)
View(rss)
ggplot(rss,aes(x=epiblast,y=TF))+geom_col()
ggplot(rss,aes(x=epiblast,y=reorder(TF,epiblast)))+geom_col()
ggplot(rss,aes(x=epiblast,y=reorder(TF,epiblast)))+geom_col()+theme_classic()
ggplot(rss[1:50,],aes(x=epiblast,y=reorder(TF,epiblast)))+geom_col()+theme_classic()
ggplot(rss[1:50,],aes(x=epiblast,y=reorder(TF,epiblast)))+geom_col()+
theme_classic()+xlab('SCENIC AUC score')+ylab('Motif')
onlyNonDuplicatedExtended(rownames(aucell_regulonAUC)）
onlyNonDuplicatedExtended(rownames(aucell_regulonAUC))
onlyNonDuplicatedExtended(rownames(regulonAUC))
lengt(onlyNonDuplicatedExtended(rownames(regulonAUC)))
length(onlyNonDuplicatedExtended(rownames(regulonAUC)))
View(regulonAUC)
regulonAUC[onlyNonDuplicatedExtended(rownames(regulonAUC))]
regulonAUC = regulonAUC[onlyNonDuplicatedExtended(rownames(regulonAUC))]
regulonAUC_mt=as.matrix(`3.4_regulonAUC`@assays@data@listData[["AUC"]])
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation=rep('epiblast',195))
rss = as.data.frame(rss)
rss$TF = rownames(rss)
rss = rss[order(rss[,1],decreasing = T),]
rowMeans(rna@assays$SCT@data[rownames(rss),])
View(rss)
onlyNonDuplicatedExtended(rownames(regulonAUC))
names(onlyNonDuplicatedExtended(rownames(regulonAUC)))
rownames(regulonAUC_mt) = names(onlyNonDuplicatedExtended(rownames(regulonAUC)))
rownames(regulonAUC_mt)
regulonAUC_mt=as.matrix(regulonAUC[["AUC"]])
View(regulonAUC)
regulonAUC_mt=as.matrix(regulonAUC@assays@data@listData[["AUC"]])
rownames(regulonAUC_mt) = names(onlyNonDuplicatedExtended(rownames(regulonAUC)))
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation=rep('epiblast',195))
rss = as.data.frame(rss)
rss$TF = rownames(rss)
rss = rss[order(rss[,1],decreasing = T),]
rowMeans(rna@assays$SCT@data[rownames(rss),])
View(rss)
rownames(rss) = names(onlyNonDuplicatedExtended(rownames(regulonAUC)))
rss$TF = rownames(rss)
View(rss)
pheatmap(regulonAUC_mt[order(rss[,1],decreasing = T),][1:50,],show_colnames = F,
cluster_cols = F,cluster_rows = F,
color = colorRampPalette(heatmap_col)(100))
View(rss)
pheatmap(regulonAUC_mt[order(rss[,1],decreasing = T),][1:50,],show_colnames = F,
cluster_cols = F,cluster_rows = F,
color = colorRampPalette(heatmap_col)(100))
View(rss)
order(rss[,1],decreasing = T)
pheatmap(regulonAUC_mt[rownames(rss)[1:50],],show_colnames = F,
cluster_cols = F,cluster_rows = F,
color = colorRampPalette(heatmap_col)(100))
egulonAUC_mt[rownames(rss)[1:50],]
regulonAUC_mt[rownames(rss)[1:50],]
View(regulonAUC_mt)
View(rss)
regulonAUC_mt=as.matrix(regulonAUC@assays@data@listData[["AUC"]])
rownames(regulonAUC_mt) = names(onlyNonDuplicatedExtended(rownames(regulonAUC)))
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation=rep('epiblast',195))
rss = as.data.frame(rss)
rownames(rss) = names(onlyNonDuplicatedExtended(rownames(regulonAUC)))
rss$TF = rownames(rss)
rss = rss[order(rss[,1],decreasing = T),]
rowMeans(rna@assays$SCT@data[rownames(rss),])
Step2_regulonTargetsInfo <- read.delim("E:/polyATAC/public epiblast/output/Step2_regulonTargetsInfo.tsv")
rssPlot <- plotRSS(rss)
plotRSS_oneSet(rss, setName = "interneurons")
regulonAUC <- loadInt(scenicOptions, "aucell_regulonAUC")
regulonAUC = regulonAUC[onlyNonDuplicatedExtended(rownames(regulonAUC))]
regulonAUC_mt=as.matrix(regulonAUC@assays@data@listData[["AUC"]])
rownames(regulonAUC_mt) = names(onlyNonDuplicatedExtended(rownames(regulonAUC)))
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation=rep('epiblast',195))
rss = as.data.frame(rss)
rownames(rss) = names(onlyNonDuplicatedExtended(rownames(regulonAUC)))
rss$TF = rownames(rss)
rss = rss[order(rss[,1],decreasing = T),]
rowMeans(rna@assays$SCT@data[rownames(rss),])
rownames(rss)
rowMeans(rna@assays$SCT@data[rownames(rss)[1:50],])
rss$exp = rowMeans(rna@assays$SCT@data[rownames(rss)[1:50],])
rss = rss[1:50,]
rss$exp = rowMeans(rna@assays$SCT@data[rownames(rss)[1:50],])
ggplot(rss[1:50,],aes(x=epiblast,y=reorder(TF,epiblast)))+geom_col()+
theme_classic()+xlab('SCENIC AUC score')+ylab('Motif')
ggplot(rss[1:50,],aes(x=epiblast,y=reorder(TF,epiblast),fill=exp))+geom_col()+
theme_classic()+xlab('SCENIC AUC score')+ylab('Motif')
ggplot(rss[1:50,],aes(x=epiblast,y=reorder(TF,epiblast),fill=exp))+geom_col()+
theme_classic()+xlab('SCENIC AUC score')+ylab('Motif')+scale_x_continuous(expand = c(0,0))
rss$mean_expression = rowMeans(rna@assays$SCT@data[rownames(rss)[1:50],])
ggplot(rss[1:50,],aes(x=epiblast,y=reorder(TF,epiblast),fill=mean_expression))+geom_col()+
theme_classic()+xlab('SCENIC AUC score')+ylab('Transcription factor')+
scale_x_continuous(expand = c(0,0))
ggplot(rss[1:50,],aes(x=epiblast,y=reorder(TF,epiblast),fill=mean_expression))+geom_col()+
theme_classic()+xlab('SCENIC AUC score')+ylab('Transcription factor')+
scale_x_continuous(expand = c(0,0))+theme(text = element_text(size=15))
ggsave('E:\\polyATAC\\public epiblast/epiblast_tf_importance.pdf',
width = 6,height = 5)
ggsave('E:\\polyATAC\\public epiblast/epiblast_tf_importance.pdf',
width = 6,height = 8)
rss <- calcRSS(AUC=getAUC(regulonAUC), cellAnnotation=rep('epiblast',195))
rss = as.data.frame(rss)
rownames(rss) = names(onlyNonDuplicatedExtended(rownames(regulonAUC)))
rss$TF = rownames(rss)
rss = rss[order(rss[,1],decreasing = T),]
View(marker)
View(scenicOptions)
scenicOptions@settings$nCores
devtools::load_all(".")
load(system.file("extdata", "cross_species_small.rda", package = "CACIMAR"))
marker_spec1 = Identify_Markers(mm_small)
View(marker_spec1)
devtools::load_all(".")
load('F:\\platform\\bug\\hs_marker.RData')
load('F:\\platform\\bug\\mm_marker.Rdata')
###
list_power_numeric <- lapply(strsplit(hs_marker$Allpower,','),
function(x) as.numeric(x))
max_values <- sapply(list_power_numeric, max)
hs_marker$power = max_values
hs_marker$cluster = hs_marker$Cluster
hs_marker$gene = rownames(hs_marker)
list_power_numeric <- lapply(strsplit(mm_marker$Allpower,','),
function(x) as.numeric(x))
max_values <- sapply(list_power_numeric, max)
mm_marker$power = max_values
mm_marker$cluster = mm_marker$Cluster
mm_marker$gene = rownames(mm_marker)
Species1_Marker_table=hs_marker
Species2_Marker_table=mm_marker
Species_name1='hs'
Species_name2='mm'
Species_name1 <- tolower(Species_name1)
Species_name2 <- tolower(Species_name2)
Spec1 <- colnames(OrthG)[2]
Spec2 <- colnames(OrthG)[4]
OrthG=OrthG_Hs_Mm
Species_name1 <- tolower(Species_name1)
Species_name2 <- tolower(Species_name2)
Spec1 <- colnames(OrthG)[2]
Spec2 <- colnames(OrthG)[4]
Spec1 <- gsub('_ID','',Spec1)
Spec2 <- gsub('_ID','',Spec2)
if (Spec1 == Species_name1 & Spec2 == Species_name2) {
Species_name <- c(Spec1,Spec2)
Species1_Marker <- Species1_Marker_table
Species2_Marker <- Species2_Marker_table
}else if(Spec2 == Species_name1 & Spec1 == Species_name2){
Species_name <- c(Spec2,Spec1)
Species2_Marker <- Species1_Marker_table
Species1_Marker <- Species2_Marker_table
}else{stop('please input correct Species name')}
Species1_Marker_table$power <- as.numeric(Species1_Marker_table$power)
Species2_Marker_table$power <- as.numeric(Species2_Marker_table$power)
### fraction in same species
Species1_Marker_table$cluster <- paste0(Species_name1, Species1_Marker_table[, 'cluster'])
Species2_Marker_table$cluster <- paste0(Species_name2, Species2_Marker_table[, 'cluster'])
ShMarker1 <- Cal_SharedMarkers(Species1_Marker_table, Species_name1)
ShMarker2 <- Cal_SharedMarkers(Species2_Marker_table, Species_name2)
Frac1 <- rbind(ShMarker1[[3]], ShMarker2[[3]])
ShMarker3 <- rbind(ShMarker1[[1]],ShMarker2[[1]])
### fraction between different species
Sp1Gene <- Species1_Marker_table$gene
ExpInd01 <- t(apply(as.matrix(Sp1Gene), 1, function(x1){
if(length(grep(x1, OrthG[,2]))==1){ x3 <- c(x1, grep(x1, OrthG[,2])) }
else if(length(grep(x1, OrthG[,4]))==1){ x3 <- c(x1, grep(x1, OrthG[,4])) }else{ x3 <- c(x1, NA) }
}) )
Sp1Ind2 <- ExpInd01[!is.na(ExpInd01[, 2]), ]
colnames(Sp1Ind2) <- c('ID', 'RowNum')
Sp2Gene <- Species2_Marker_table$gene
ExpInd02 <- t(apply(as.matrix(Sp2Gene), 1, function(x1){
if(length(grep(x1, OrthG[,2]))==1){ x3 <- c(x1, grep(x1, OrthG[,2])) }
else if(length(grep(x1, OrthG[,4]))==1){ x3 <- c(x1, grep(x1, OrthG[,4])) }else{ x3 <- c(x1, NA) }
}) )
Sp2Ind2 <- ExpInd02[!is.na(ExpInd02[, 2]), ]
colnames(Sp2Ind2) <- c('ID', 'RowNum')
ShMarker2 <- Cal_SharedMarkers_Species(Species1_Marker_table, Species2_Marker_table,
Sp1Ind2, Sp2Ind2,
c(Species_name1,Species_name2))
View(ShMarker2)
View(ShMarker1)
View(Species1_Marker_table)
Species1_Marker_table
View(ExpInd01)
ExpInd01 <- t(apply(as.matrix(Sp1Gene), 1, function(x1){
if(length(grep(x1, OrthG[,2]))==1){ x3 <- c(x1, grep(x1, OrthG[,2])) }
else if(length(grep(x1, OrthG[,4]))==1){ x3 <- c(x1, grep(x1, OrthG[,4])) }else{ x3 <- c(x1, NA) }
}) )
View(OrthG)
a1=OrthG_Zf_Ch
View(a1)
ExpInd01 <- t(apply(as.matrix(Sp1Gene), 1, function(x1){
if(length(grep(x1, OrthG[,3]))==1){ x3 <- c(x1, grep(x1, OrthG[,3])) }
else if(length(grep(x1, OrthG[,5]))==1){ x3 <- c(x1, grep(x1, OrthG[,5])) }else{ x3 <- c(x1, NA) }
}) )
View(ExpInd01)
Sp1Ind2 <- ExpInd01[!is.na(ExpInd01[, 2]), ]
colnames(Sp1Ind2) <- c('ID', 'RowNum')
Sp2Gene <- Species2_Marker_table$gene
ExpInd02 <- t(apply(as.matrix(Sp2Gene), 1, function(x1){
if(length(grep(x1, OrthG[,3]))==1){ x3 <- c(x1, grep(x1, OrthG[,3])) }
else if(length(grep(x1, OrthG[,5]))==1){ x3 <- c(x1, grep(x1, OrthG[,5])) }else{ x3 <- c(x1, NA) }
}) )
Sp2Ind2 <- ExpInd02[!is.na(ExpInd02[, 2]), ]
colnames(Sp2Ind2) <- c('ID', 'RowNum')
ShMarker2 <- Cal_SharedMarkers_Species(Species1_Marker_table, Species2_Marker_table,
Sp1Ind2, Sp2Ind2,
c(Species_name1,Species_name2))
ShMarker3 <- rbind(ShMarker3, ShMarker2[[1]])
Frac1 <- rbind(Frac1, ShMarker2[[3]])
AllCluster1 <- unique(c(Species1_Marker_table$cluster,Species2_Marker_table$cluster))
AllCluster12 <- sort(AllCluster1); Frac3 <- c()
for(i in 1:length(AllCluster1)){ Frac21 <- c()
for(j in 1:length(AllCluster1)){
Frac11 <- Frac1[Frac1[,1]==AllCluster1[i] & Frac1[,2]==AllCluster1[j], 3]
Frac12 <- Frac1[Frac1[,1]==AllCluster1[j] & Frac1[,2]==AllCluster1[i], 3]
if(length(Frac11)==1){ Frac2 <- as.numeric(Frac11)
}else if(length(Frac12)==1){ Frac2 <- as.numeric(Frac12)
}else{
print(paste('No',AllCluster1[i],AllCluster1[j])) }
Frac21 <- c(Frac21, Frac2)
}
Frac3 <- rbind(Frac3, Frac21)
}
rownames(Frac3) <- AllCluster1; colnames(Frac3) <- AllCluster1
ShMarker4 <- list(); ShMarker4[[1]] <- ShMarker3
Frac3[Frac3==1] <- NA
ShMarker4[[2]] <- Frac3
ShMarker4[[3]] <- Frac1
#ShMarker4[[4]] <- ShMarker2[[1]]
return(ShMarker4)
View(ShMarker4)
ShMarker4[[1]]
ShMarker4[[2]]
### fraction between different species
Sp1Gene <- Species1_Marker_table$gene
Sp1Gene
grep('ENS'Sp1Gene[1])
grep('ENS',Sp1Gene[1])
str_detect('ENS',Sp1Gene[1])
devtools::load_all(".")
conserved_celltype <- Identify_ConservedCellTypes(OrthG_Hs_Mm, mm_marker, hs_marker,'mm','hs')
View(conserved_celltype)
conserved_celltype[[2]]
